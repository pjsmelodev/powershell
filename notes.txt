ðŸ”¹ Gerenciamento do Sistema
Get-Help â†’ Exibe ajuda sobre comandos
Get-Command â†’ Lista todos os comandos disponÃ­veis
Get-Process â†’ Exibe processos em execuÃ§Ã£o
Stop-Process -Name "NomeProcesso" â†’ Encerra um processo
Restart-Computer â†’ Reinicia o computador
Get-Service â†’ Lista os serviÃ§os do sistema
Start-Service -Name "NomeServico" â†’ Inicia um serviÃ§o
Stop-Service -Name "NomeServico" â†’ Para um serviÃ§o
ðŸ”¹ Gerenciamento de Arquivos e DiretÃ³rios
Get-Location â†’ Mostra o diretÃ³rio atual
Set-Location "C:\Pasta" (cd) â†’ Muda para um diretÃ³rio especÃ­fico
Get-ChildItem (ls ou dir) â†’ Lista arquivos e pastas
New-Item -ItemType File "arquivo.txt" â†’ Cria um arquivo vazio
New-Item -ItemType Directory "NovaPasta" â†’ Cria uma pasta
Remove-Item "arquivo.txt" (rm) â†’ Exclui um arquivo ou pasta
Copy-Item "origem.txt" -Destination "destino.txt" (cp) â†’ Copia um arquivo
Move-Item "arquivo.txt" -Destination "NovaPasta" (mv) â†’ Move um arquivo
Rename-Item "antigo.txt" -NewName "novo.txt" â†’ Renomeia um arquivo
ðŸ”¹ Gerenciamento de UsuÃ¡rios e PermissÃµes
Get-LocalUser â†’ Lista usuÃ¡rios locais
New-LocalUser "NomeUsuario" -Password (ConvertTo-SecureString "Senha" -AsPlainText -Force) -FullName "Nome Completo" â†’ Cria um usuÃ¡rio
Remove-LocalUser -Name "NomeUsuario" â†’ Exclui um usuÃ¡rio
Get-LocalGroup â†’ Lista grupos locais
Add-LocalGroupMember -Group "Administrators" -Member "NomeUsuario" â†’ Adiciona um usuÃ¡rio a um grupo
ðŸ”¹ Rede e Internet
Test-Connection google.com (ping) â†’ Testa conexÃ£o com um host
Get-NetIPAddress â†’ Exibe endereÃ§os IP do sistema
Get-NetAdapter â†’ Exibe informaÃ§Ãµes sobre adaptadores de rede
Get-NetTCPConnection â†’ Lista conexÃµes TCP ativas
Resolve-DnsName google.com (nslookup) â†’ ObtÃ©m informaÃ§Ãµes de DNS
ðŸ”¹ Gerenciamento de Tarefas e Agendamentos
Get-ScheduledTask â†’ Lista tarefas agendadas
New-ScheduledTaskAction -Execute "notepad.exe" â†’ Cria uma aÃ§Ã£o para abrir o Bloco de Notas
Register-ScheduledTask -TaskName "AbrirNotepad" -Action $acao -Trigger $gatilho -User "Administrador" -Password "senha" â†’ Cria uma tarefa agendada
ðŸ”¹ ManipulaÃ§Ã£o de Texto e Arquivos
Get-Content "arquivo.txt" (cat) â†’ Exibe o conteÃºdo de um arquivo
Set-Content "arquivo.txt" "Novo conteÃºdo" â†’ Escreve texto em um arquivo
Add-Content "arquivo.txt" "Linha adicional" (echo) â†’ Adiciona texto a um arquivo
Select-String -Path "arquivo.txt" -Pattern "palavra" (grep) â†’ Pesquisa um termo dentro de um arquivo
ðŸ”¹ Gerenciamento de Programas e Pacotes
Get-AppxPackage â†’ Lista aplicativos instalados
Uninstall-Package -Name "NomeDoPrograma" â†’ Remove um programa instalado
Install-Package -Name "NomeDoPrograma" â†’ Instala um programa
winget install "Google Chrome" â†’ Instala o Google Chrome (usando Winget)

ERROR HANDLING:
* Try -> bloco de cÃ³digo que Ã© esperado correr

* Catch -> Ã© suposto correr quando alguma exceÃ§Ã£o Ã© apanhada

* Finally -> bloco de cÃ³digo que corre independentemente de alguma exceÃ§Ã£o ser apanhada

INSPECIONAR ERROS:
Um objeto de exceÃ§Ã£o contÃ©m:
    * Mensagem: explica o erro que ocorreu
    * Stacktrace: indica que statement correu antes do erro ter ocorrido
    * Offending row: indica a linha onde o erro ocorreu

$_ -> variÃ¡vel interna que tem uma propriedade de exceÃ§Ã£o

Raising Errors:
* Non-terminating errors: erros que nÃ£o terminam a execuÃ§Ã£o.
    Usam o cmdlet Write-Error
    Ã‰ possÃ­vel usar o cmdlet ErrorAction para indicar o que deve acontecer aquando do erro
    exemplo:
        Try {
            Get-Content './file.txt' -ErrorAction Stop
        } Catch {
            Write-Error "File can't be found"
        }

* Business rules: quando o cÃ³digo nÃ£o pÃ¡ra de responder mas Ã© desejado que isso aconteÃ§a (razÃµes de negÃ³cio)
    Ã‰ possÃ­vel usar Throw para lanÃ§ar um erro intencionalmente de forma a parar o cÃ³digo
    exemplo:
        Try {
            If ($Path -eq './forbidden') 
        {
            Throw "Path not allowed"
        }
        } Catch {
        Write-Error "$($_.exception.message)"
        }

MANAGE USER ACCOUNTS IN PowerShell
Cmdlet	                Description
New-ADUser	            Creates a user account
Get-ADUser	            Retrieves a user account
Set-ADUser	            Modifies properties of a user account
Remove-ADUser	        Deletes a user account
Set-ADAccountPassword	Resets the password of a user account
Unlock-ADAccount	    Unlocks a user account that's been locked after exceeding the permitted number of incorrect sign-in attempts
Enable-ADAccount	    Enables a user account
Disable-ADAccount       Disables a user account

CREATING NEW USER ACCOUNTS
Parameter	            Description
â€‘AccountExpirationDate	Defines the expiration date for a user account
â€‘AccountPassword	    Defines the password for a user account
â€‘ChangePasswordAtLogon	Requires a user account to change passwords at the next sign-in
â€‘Department	            Defines the department for a user account
â€‘DisplayName	        Defines the display name for a user account
â€‘HomeDirectory	        Defines the location of the home directory for a user account
â€‘HomeDrive	            Defines the drive letters that map to the home directory for a user account
â€‘GivenName	            Defines the first name of a user account

MANAGING GROUPS
Cmdlet	                            Description
New-ADGroup	                        Creates a new group
Set-ADGroup	                        Modifies properties of a group
Get-ADGroup	                        Displays properties of a group
Remove-ADGroup	                    Deletes a group
Add-ADGroupMember	                Adds members to a group
Get-ADGroupMember	                Displays members of a group
Remove-ADGroupMember	            Removes members from a group
Add-ADPrincipalGroupMembership	    Adds group membership to an object
Get-ADPrincipalGroupMembership	    Displays group membership of an object
Remove-ADPrincipalGroupMembership	Removes group membership from an object

CREATING NEW GROUPS
Parameter	    Description
â€‘Name	        Defines the name of a group
â€‘GroupScope	    Defines the scope of a group as DomainLocal, Global, or Universal; you must provide this parameter
â€‘DisplayName	Defines the Lightweight Directory Access Protocol (LDAP) display name for an object
â€‘GroupCategory	Defines whether a group is a security group or a distribution group; if you don't specify either, a security group is created
â€‘ManagedBy	    Defines a user or group that can manage a group
â€‘Path	        Defines the OU or container in which a group is created
â€‘SamAccountName	Defines a name that is backward-compatible with older operating systems

MANAGE COMPUTER ACCOUNTS IN PowerShell
Cmdlet	                        Description
New-ADComputer	                Creates a new computer account
Set-ADComputer	                Modifies properties of a computer account
Get-ADComputer	                Displays properties of a computer account
Remove-ADComputer	            Deletes a computer account
Test-ComputerSecureChannel	    Verifies or repairs the trust relationship between a computer and the domain
Reset-ComputerMachinePassword	Resets the password for a computer account

CREATING NEW COMPUTER ACCOUNTS
Parameter	Description
â€‘Name	    Defines the name of a computer account
â€‘Path	    Defines the OU or container where a computer account is created
â€‘Enabled	Defines whether the computer account is enabled or disabled; by default, a computer account is enabled, and a random password is generated

MANAGE ORGANIZATIONAL UNITS AND ACTIVE DIRECTORY
Cmdlet	                    Description
New-ADOrganizationalUnit	Creates an OU
Set-ADOrganizationalUnit	Modifies properties of an OU
Get-ADOrganizationalUnit	Displays properties of an OU
Remove-ADOrganizationalUnit	Deletes an OU

CRATING NEW OUs
Parameter	                        Description
â€‘Name	                            Defines the name of a new OU
â€‘Path	                            Defines the location of a new OU
â€‘ProtectedFromAccidentalDeletion	Prevents anyone from accidentally deleting an OU; the default value is $true

ACTIVE DIRECTORY OBJECT cmdlets
Cmdlet	            Description
New-ADObject	    Creates a new Active Directory object
Set-ADObject	    Modifies properties of an Active Directory object
Get-ADObject	    Displays properties of an Active Directory object
Remove-ADObject	    Deletes an Active Directory object
Rename-ADObject	    Renames an Active Directory object
Restore-ADObject	Restores a deleted Active Directory object from the Active Directory Recycle Bin
Move-ADObject	    Moves an Active Directory object from one container to another container
Sync-ADObject	    Syncs an Active Directory object between two domain controllers

CREATING A NEW Active Directory OBJECT
Parameter	        Description
â€‘Name	            Defines the name of an object
â€‘Type	            Defines the LDAP type of an object
â€‘OtherAttributes	Defines properties of an object that isn't accessible from other parameters
â€‘Path	            Defines the container in which an object is created

KNOWLEDGE CHECK:
1. You need to create a Global security group named Group1. Which type of parameter will you use to specify a Global group when using the New-ADGroup PowerShell cmdlet?
    -Name

2. You need to use PowerShell to review the Department and email address for an Active Directory user named User1. How will you format the PowerShell command?
    Get-ADUser -Identity User1 -Properties Department,EmailAdress

cmdlets DO MÃ“DULO Microsoft.PowerShell.Management
Cmdlet	            Description
Get-ComputerInfo	Retrieves all system and operating system properties from the computer
Get-Service	        Retrieves a list of all services on the computer
Get-EventLog	    Retrieves events and event logs from local and remote computers (only available in Windows PowerShell 5.1)
Get-Process	        Retrieves a list of all active processes on a local or remote computer
Stop-Service	    Stops one or more running services
Stop-Process	    Stops one or more running processes
Stop-Computer	    Shuts down local and remote computers
Clear-EventLog	    Deletes all of the entries from the specified event logs on the local computer or on remote computers
Clear-RecycleBin	Deletes the content of a computer's recycle bin
Restart-Computer	Restarts the operating system on local and remote computers
Restart-Service	    Stops and then starts one or more services

exemplos:
    Get-ComputerInfo -> devolve informaÃ§Ã£o sobre o computador
    Get-EventLog -LogName Application -Newest 5 -EntryType Error -> devolve as 5 entradas mais recentes no Application Log, relacionadas com erros
    Clear-EventLog -LogName Application -> limpa o Application Log
    Get-Command -Module Microsoft.PowerShell.Security -> devolve os cmdlets relacionadas com seguranÃ§a

ACLs
Cmdlet	Description
Get-Acl	This cmdlet gets objects that represent the security descriptor of a file or resource. The security descriptor includes the access control lists (ACLs) of the resource. The ACL lists permissions that users and groups have to access the resource.
Set-Acl	This cmdlet changes the security descriptor of a specified item, such as a file, folder, or a registry key, to match the values in a security descriptor that you supply.

KNOWLEDGE CHECK:
1. You need to use PowerShell to review system and operating system properties of the local computer. Which cmdlet should you use? 
    Get-ComputerInfo

2. You want to check the level of access a user has to C:\Folder1. Which cmdlet in the Microsoft.PowerShell.Security module would you use?
    Get-Acl

MANAGE IP ADDRESS IN PowerShell
Cmdlet	            Description
New-NetIPAddress	Creates a new IP address
Get-NetIPAddress	Displays properties of an IP address
Set-NetIPAddress	Modifies properties of an IP address
Remove-NetIPAddress	Deletes an IP address

CREATING NEW IP ADDRESS SETTINGS
Parameter	    Description
-IPAddress	    Defines the IPv4 or IPv6 address to create
-InterfaceIndex	Defines the network interface, by index, for the IP address
-InterfaceAlias	Defines the network interface, by name, for the IP address
-DefaultGateway	Defines the IPv4 or IPv6 address of the default gateway host
-PrefixLength	Defines the subnet mask for the IP address

MANAGE IP ROUTING IN PowerShell
Cmdlet	        Description
New-NetRoute	Creates an entry in the IP routing table
Get-NetRoute	Retrieves an entry from the IP routing table
Set-NetRoute	Modifies properties of an entry in the IP routing table
Remove-NetRoute	Deletes an entry from the IP routing table
Find-NetRoute	Identifies the best local IP address and route to reach a remote address

CREATING IP ROUTING TABLE ENTRY
Parameter	        Description
â€‘DestinationPrefix	Defines the destination prefix of an IP route
â€‘InterfaceAlias	    Defines the network interface, by alias, for an IP route
â€‘InterfaceIndex	    Defines the network interface, by index, for an IP route
â€‘NextHop	        Defines the next hop for an IP route
â€‘RouteMetric	    Defines the route metric for an IP route

MANAGE DNS CLIENTS IN PowerShell
Cmdlet	                    Description
Get-DnsClient	            Gets details about a network interface
Set-DnsClient	            Sets DNS client configuration settings for a network interface
Get-DnsClientServerAddress	Gets the DNS server address settings for a network interface
Set-DnsClientServerAddress	Sets the DNS server address for a network interface

MANAGE WINDOWS FIREWALL SETTINGS IN PowerShell
Cmdlet	                Description
New-NetFirewallRule	    Creates a new firewall rule
Set-NetFirewallRule	    Sets properties for a firewall rule
Get-NetFirewallRule	    Gets properties for a firewall rule
Remove-NetFirewallRule	Deletes a firewall rule
Rename-NetFirewallRule	Renames a firewall rule
Copy-NetFirewallRule	Makes a copy of a firewall rule
Enable-NetFirewallRule	Enables a firewall rule
Disable-NetFirewallRule	Disables a firewall rule
Get-NetFirewallProfile	Gets properties for a firewall profile
Set-NetFirewallProfile	Sets properties for a firewall profile

KNOWLEDGE CHECK:
1. Which parameter can you use with *-NetIPAddress cmdlets to identify a network interface?
    -InterfaceAlias

2. You need to manage firewall settings and rules with PowerShell. Which PowerShell module contains the required cmdlets?
    NetSecurity module

KNOWLEDGE CHECK:
1. Which construct should you use to process an array when you're not sure how many items will be in the array?
    ForEach

2. Which loop construct in PowerShell supports processing multiple objects simultaneously?
    ForEach

USE VARIABLE SCOPE IN WINDOWS PowerShell SCRIPTS
Scope	    Description
Global	    The global scope is for the Windows PowerShell prompt. Variables set at the Windows PowerShell prompt can be reviewed in all the scripts started at that Windows PowerShell prompt. Variables created at a Windows PowerShell prompt don't exist in other Windows PowerShell prompts or in instances of the Windows PowerShell Integrated Scripting Environment (ISE).
Script	    The script scope is for a single script. Variables set within a script can be reviewed by all the functions within that script. If you set a variable value in the script scope that already exists in the global scope, a new variable is created in the script scope. There are then two variables of the same name in two separate scopes. At this point, when you review the value of the variable in the script, the value of the variable in the script scope is returned.
Function	The function scope is for a single function. Variables set within a function aren't shared with other functions or the script. If you set a variable value in the function scope that already exists in the global or script scope, a new variable is created in the function scope. Then, there are two variables of the same name in two separate scopes.

KNOWLEDGE CHECK:
1. Which path should you use to store a module named OrgFunctions.psm1 for Windows PowerShell?
    C:\Windows\System32\WindowsPowerShell\1.0\Modules\OrgFunctions

2. Which command will modify a script scope variable from a function?
    $script:var = "Modified from function"